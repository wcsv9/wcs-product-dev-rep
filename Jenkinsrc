pipeline {
    agent none
    options { skipDefaultCheckout() }
        stages {
        stage('checking out') {
            agent { label 'wcsv9' }
            steps { 
             echo "Checking out to Mounted Volume"
	     checkout scm
              
            }
        }
            stage('Creating WCB Commerce Build') {
            agent { label 'wcsv9' }
                steps { 
             echo "Building Image in Utility Container"
                    sh 'docker exec -i utilsdep bash -c  "cd /opt/WebSphere/CommerceServer90/wcbd/ ; ./setenv ; ./wcbd-ant -buildfile wcbd-build.xml -Dbuild.type=local -Dapp.type=$apptype -Dbuild.label=$label -Dwork.dir=/opt/WebSphere/CommerceServer90/wcbd"'
              
            }
            }
			
            stage('Copying Package to Deploy Folder') {
            agent { label 'wcsv9' }
                steps { 
                   sh 'docker cp -L utilsdep:/opt/WebSphere/CommerceServer90/wcbd/dist/server/wcbd-deploy-server-local-"$apptype"-"$label".zip /data/Deploy'
                  
                    
            }
            }
			   stage('Unpacking Deploy package') {
            agent { label 'wcsv9' }
                steps { 
                            
                   dir ('/data/Deploy') {
                   sh 'rm -rf /data/Deploy/CustDeploy/CustDeploy/*'
                  sh 'unzip wcbd-deploy-server-local-"$apptype"-"$label".zip -d /data/Deploy/CustDeploy/CustDeploy'
             
              }
                    
            }
            }
		 stage('Updating Image with Changes ') {
            agent { label 'wcsv9' }
                steps { 
                    dir ('/data/Deploy/CustDeploy/') {
                    sh 'docker build -f Dockerfile."$apptype" . -t 192.168.17.92:5000/"$apptype"-app:"$image"'
                    
                    }
            }
            }	        
		
		stage('Pushing to Repo ') {
            agent { label 'wcsv9' }
                steps { 
                    dir ('/data/Deploy/CustDeploy/CustDeploy') {
                    sh 'docker push 192.168.17.92:5000/"$apptype"-app:"$image"'
		   
                    
                    }
            }
            }
			stage('Updating Pod') {
            agent { label 'wcsv9' }
                steps { 
		   
                    sh 'export KUBECONFIG=/etc/kubernetes/admin.conf && kubectl set image deployment/demoqaauth"$apptype"-app "$apptype"-app=192.168.17.92:5000/"$apptype"-app:"$image"'
                  
                    
            }
            }
            
            
            
        }
}
