<%--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2011, 2017 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
--%>

<%--
  *****
  * This file retrieves and prepares a lot of information which are used by all the store JSP files.
  * This file creates JSTL variables which can just be referenced by the store JSP files that include
  * it.
  *****
--%>

<%
    response.setHeader("Content-Security-Policy", "frame-ancestors 'self' https://commerceinsights.ibmcloud.com");
%>

<%@ include file="JSTLEnvironmentSetup.jspf" %>
<%@ page import="com.ibm.commerce.server.ECConstants"%>

<%
// check to see if wcparam is available; initialise it if it is not available
if( null == request.getAttribute(com.ibm.commerce.server.ECConstants.EC_INPUT_PARAM)){
	request.setAttribute(com.ibm.commerce.server.ECConstants.EC_INPUT_PARAM, new com.ibm.commerce.datatype.WcParam(request));
}
%>

<c:set var = "env_vfileColor" scope="request" value="images/colors/color1/"/>

<%-- These are variables to use on pages --%>
<c:set var="locale" value="${CommandContext.locale}" scope="request" />
<c:set var="userType" value="${CommandContext.user.registerType}" scope="request"/>
<c:set var="userDisplayName" value="${CommandContext.user.displayName}" scope="request"/>

<%-- Enable to allow selection of skus/attributes which are set to be buyable=false at store level default value is false --%>
<c:set var="buyablePurchasable" value="false" scope="request" />

<c:set var="lastCmdName" value="${CommandContext.commandName}" scope="request" />
<c:set var="langId" value="${CommandContext.languageId}" scope="request" />
<c:set var="storeId" value="${CommandContext.storeId}" scope="request"/>
<c:if test="${!empty WCParam.catalogId}">
	<c:set var="catalogId" scope="request"><c:out value="${WCParam.catalogId}"/></c:set>
</c:if>
<c:set var="userId" value="${CommandContext.userId}"/>

<c:set var="env_OnBehalfOf" value="false"/>
<c:set var="env_useExternalCart" value="false"/>
<c:set var="env_browseOnly" value="false"/>
<c:set var="env_escapeXmlFlag" value="true"/>
<wcst:mapper source="CommandContext" method="getContext" var="CmdContextGetContxt" />
<flow:ifEnabled feature="on-behalf-of">
	<c:if test="${empty extCartId}">
		<c:set var="extContext" value="${CmdContextGetContxt['com.ibm.commerce.context.ExternalCartContext']}"/>
		<wcst:mapper source="extContext" method="getAttribute" var="extContextGetAttr" />
		<c:if test="${!empty extContext}">
			<c:set var="extCartId" value="${extContextGetAttr['extCartId']}"/>
			<c:if test="${extContextGetAttr['browseOnly']}">
				<c:set var="browseOnly" value="true"/>
			</c:if>
		</c:if>
	</c:if>
	<c:if test="${!empty CommandContext.forUserId }">
		<c:set var="env_OnBehalfOf" value="true"/>
		<c:if test="${!empty extCartId }">
			<c:set var="env_useExternalCart" value="true"/>
		</c:if>
		<c:if test="${!empty browseOnly}">
			<c:set var="env_browseOnly" value="true"/>
		</c:if>
	</c:if>
</flow:ifEnabled>

<wcst:alias name="BackendConfig" var="backendConfig" />
<%-- Determine if we are in preview mode. --%>
<wcst:preview var="env_inPreview" />
<c:if test="${empty searchHostNamePath}">
	<c:set var="hostname" value="${backendConfig.searchServerHostname}"/>
	<c:choose>
		<c:when test="${env_inPreview}">
			<c:set var="searchHostNamePath" value="https://${hostname}:${backendConfig.searchServerPreviewSecuredPort}"/>
			<c:set var="searchContextPath" value="${backendConfig.searchServerPreviewContextPath}"/>
		</c:when>
		<c:otherwise>
			<c:set var="searchHostNamePath" value="https://${hostname}:${backendConfig.searchServerPort}"/>
			<c:set var="searchContextPath" value="${backendConfig.searchServerContextPath}"/>
		</c:otherwise>
	</c:choose>
</c:if>

<wcst:alias name="ModuleConfig" var="configInst" />
<wcst:mapper source="configInst" method="getWebModule" var="moduleConfig" />
<wcst:mapper source="configInst" method="getValue" var="propertyConfig"/>
<c:set var="restServerName" value="${propertyConfig['WebServer/HostName']}" scope="request"/>
<c:set var="persistentCookieLifetimeInSecond" value="${propertyConfig['persistentCookieLifetimeInSecond']}" scope="request"/>
<c:choose>
	<c:when test="${pageContext.request.secure}">
		<c:choose>
			<c:when test="${env_inPreview}">
				<c:set var="restport" value="${moduleConfig['RestPreview'].SSLPort}"/>
				<c:if test="${!empty restport}">
					<c:set var="restport" value=":${moduleConfig['RestPreview'].SSLPort}"/>
				</c:if>
				<c:set var="restPrefix" value="https://${restServerName}${restport}${moduleConfig['RestPreview'].contextPath}" scope="request"/>
			</c:when>
			<c:otherwise>
				<c:set var="restport" value="${moduleConfig['Rest'].SSLPort}"/>
				<c:if test="${!empty restport}">
					<c:set var="restport" value=":${moduleConfig['Rest'].SSLPort}"/>
				</c:if>
				<c:set var="restPrefix" value="https://${restServerName}${restport}${moduleConfig['Rest'].contextPath}" scope="request"/>
			</c:otherwise>
		</c:choose>
	</c:when>
	<c:otherwise>
		<c:choose>
			<c:when test="${env_inPreview}">
				<c:set var="restport" value="${moduleConfig['RestPreview'].nonSSLPort}"/>
				<c:if test="${!empty restport}">
					<c:set var="restport" value=":${moduleConfig['RestPreview'].nonSSLPort}"/>
				</c:if>
				<c:set var="restPrefix" value="http://${restServerName}${restport}${moduleConfig['RestPreview'].contextPath}" scope="request"/>
			</c:when>
			<c:otherwise>
				<c:set var="restport" value="${moduleConfig['Rest'].nonSSLPort}"/>
				<c:if test="${!empty restport}">
					<c:set var="restport" value=":${moduleConfig['Rest'].nonSSLPort}"/>
				</c:if>
				<c:set var="restPrefix" value="http://${restServerName}${restport}${moduleConfig['Rest'].contextPath}" scope="request"/>
			</c:otherwise>
		</c:choose>
	</c:otherwise>
</c:choose>

<c:if test="${empty REST_CONFIG}">
	<jsp:useBean id="REST_CONFIG" class="java.util.HashMap" scope="request"/>
	<c:choose>
		<c:when test="${pageContext.request.secure}">
			<c:choose>
				<c:when test="${env_inPreview}">
					<c:if test="${empty secureRestPreviewConfig}">
						<jsp:useBean id="secureRestPreviewConfig" class="java.util.HashMap" scope="request"/>
						<c:set target="${secureRestPreviewConfig}" property="schema" value="https"/>
						<c:set target="${secureRestPreviewConfig}" property="host" value="${restServerName}"/>
						<c:set target="${secureRestPreviewConfig}" property="port" value="${moduleConfig['RestPreview'].SSLPort}"/>
						<c:set target="${secureRestPreviewConfig}" property="contextPath" value="${moduleConfig['RestPreview'].contextPath}"/>
					</c:if>
					<c:set target="${REST_CONFIG}" property="${storeId}" value="${secureRestPreviewConfig}"/>
				</c:when>
				<c:otherwise>
					<c:if test="${empty secureRestConfig}">
						<jsp:useBean id="secureRestConfig" class="java.util.HashMap" scope="request"/>
						<c:set target="${secureRestConfig}" property="schema" value="https"/>
						<c:set target="${secureRestConfig}" property="host" value="${restServerName}"/>
						<c:set target="${secureRestConfig}" property="port" value="${moduleConfig['Rest'].SSLPort}"/>
						<c:set target="${secureRestConfig}" property="contextPath" value="${moduleConfig['Rest'].contextPath}"/>
					</c:if>
					<c:set target="${REST_CONFIG}" property="${storeId}" value="${secureRestConfig}"/>
				</c:otherwise>
			</c:choose>
		</c:when>
		<c:otherwise>
			<c:choose>
				<c:when test="${env_inPreview}">
					<c:if test="${empty restPreviewConfig}">
						<jsp:useBean id="restPreviewConfig" class="java.util.HashMap" scope="request"/>
						<c:set target="${restPreviewConfig}" property="schema" value="http"/>
						<c:set target="${restPreviewConfig}" property="host" value="${restServerName}"/>
						<c:set target="${restPreviewConfig}" property="port" value="${moduleConfig['RestPreview'].nonSSLPort}"/>
						<c:set target="${restPreviewConfig}" property="contextPath" value="${moduleConfig['RestPreview'].contextPath}"/>
					</c:if>
					<c:set target="${REST_CONFIG}" property="${storeId}" value="${restPreviewConfig}"/>
				</c:when>
				<c:otherwise>
					<c:if test="${empty restConfig}">
						<jsp:useBean id="restConfig" class="java.util.HashMap" scope="request"/>
						<c:set target="${restConfig}" property="schema" value="http"/>
						<c:set target="${restConfig}" property="host" value="${restServerName}"/>
						<c:set target="${restConfig}" property="port" value="${moduleConfig['Rest'].nonSSLPort}"/>
						<c:set target="${restConfig}" property="contextPath" value="${moduleConfig['Rest'].contextPath}"/>
					</c:if>
					<c:set target="${REST_CONFIG}" property="${storeId}" value="${restConfig}"/>
				</c:otherwise>
			</c:choose>
		</c:otherwise>
	</c:choose>
</c:if>

<wcf:useBean var="cachedCatalogEntryDetailsMap" classname="java.util.HashMap" scope="request"/>
<wcf:useBean var="cachedCategoryViewMap" classname="java.util.HashMap" scope="request"/>
<wcf:useBean var="cachedOnlineStoreMap" classname="java.util.HashMap" scope="request"/>
<wcf:useBean var="cachedUsableShippingInfoMap" classname="java.util.HashMap" scope="request"/>

<c:set var="key1" value="store/${storeId}/databean+IBM_Store_Details+${langId}+${jspStoreDir}"/>
<c:set var="sdb" value="${cachedOnlineStoreMap[key1]}"/>
<c:if test="${empty sdb}">
	<wcf:rest var="sdb" url="store/{storeId}/databean" cached="true">
		<wcf:var name="storeId" value="${storeId}" encode="true"/>
		<wcf:param name="profileName" value="IBM_Store_Details" encode="true"/>
		<wcf:param name="langId" value="${langId}" encode="true"/>
		<wcf:param name="jspStoreDir" value="${jspStoreDir}" encode="true" />
	</wcf:rest>
	<wcf:set target = "${cachedOnlineStoreMap}" key="${key1}" value="${sdb}"/>
</c:if>
<c:set var="storeName" value="${sdb.storeEntityDescription.displayName}" scope="request" />
<%-- Determine whether store is B2B store type --%>
<c:if test="${sdb.storeType == 'B2B' || sdb.storeType == 'BMH'}" >
	<c:set var="env_b2bStore" value="true"/>
</c:if>
<%-- Does this store support mobile store --%>
<c:if test = '${fn:contains(sdb.storeLevel,"MOBILE")}'>
	<c:set var="env_mobileStoreSupport" value="true" scope="request" />
</c:if>

<%--
	For CaaS, prefix the path of jspStoreImgDir and jsAssetsDir, so that it points to webserver. OOB it will be empty
--%>
<c:set var = "jsServerPath" value=""/>
<c:set var = "cssServerPath" value=""/>

<%-- urlLangId parameter can be passed to wcf:url tags. If passed, this urlLangId will be used to look up
the URL keywords. If keywords are not found for this urlLangId, then store default langId will be used to look up
the URL keywords. By default page langId is set as urlLangId. If store URLs are supported in only one language, then set that
Id here --%>
<c:set var="urlLangId" value="${langId}" scope="request"/>

<%-- URL pointing to the hosted store home directory.  Use this to reference images --%>
<c:set var="storeImgDir" value="${sdb.filePath}" scope="request" />

<%-- WebAsset directory of the hosted store.  Includes JSPs, HTML, Image files, etc --%>
<c:set var="storeDir" value="${sdb.jspPath}" scope="request" />

<%-- URL pointing to the shared image directory.  Use this to reference images --%>
<c:set var="jspStoreImgDir" value="${jsServerPath}${sdb.jspStoreDirFilePath}" scope="request" />

<%-- WebAsset directory of the shared file directory.  Includes JSPs, HTML, Image files, etc --%>
<c:set var="env_jspStoreDir" value="/${sdb.jspStoreDir}/" scope="request" />

<%-- Path used to retrieve the JavaScript assets.  Use this to reference your JavaScript files. --%>
<c:set var="jsAssetsDir" value="${cssServerPath}${sdb.jspStoreDirFilePath}" scope="request" />

<%-- Path to Commerce Composer site level widgets. --%>
<c:set var="env_siteWidgetsDir" value="/Widgets_801/" scope="request" />

<%-- Path to IBM Widgets directory. Use this to reference JS, CSS, etc --%>
<c:set var="jsIBMWidgetsAssetsPrefix" value="${staticIBMAssetAliasRoot}${env_siteWidgetsDir}" scope="request" />

<%-- Path to IBM Widgets directory. Use this to reference images --%>
<c:set var="jspIBMWidgetsImgPrefix" value="${staticIBMAssetAliasRoot}/"  scope="request"/>

<%--
Example directories:
storeImgDir - /wcsstore/<hostedstoredir>/
storeDir - /<hostedstoredir>/
jspStoreImgDir - /wcsstore/<sharedstorefrontassetstoredir>/
jspStoreDir - /<sharedstorefrontassetstoredir>/
--%>

<%-- WCH cms --%>
<flow:ifEnabled feature="WCHIntegration">
	<%-- Path to subdirectory in WCH --%>
	<c:set var="storeAssetsPath" value="StoreAssets"/>
	<c:set var="ibmAssetsPath" value="IBMAssets"/>
	
	<%-- Persist wchDebugMode in cookie --%>
	<c:choose>
		<c:when test="${not empty WCParam.wchDebugMode}">
			<%
				javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie("WCH_DEBUG_MODE", (String)request.getParameter("wchDebugMode"));
				cookie.setPath("/");
				response.addCookie(cookie);
			%>
			<c:set var="useWCHDebugMode" value="${WCParam.wchDebugMode}"/>
		</c:when>
		<c:otherwise>
			<c:set var="useWCHDebugMode" value="${cookie.WCH_DEBUG_MODE.value}"/>
		</c:otherwise>
	</c:choose>
	
	<wcst:resolveContentURL var="resolvedStaticAssetsRoot" url="http://[cmsHost]" storeStaticAssets="${!useWCHDebugMode}" includeHostName="true" useCustomerTenantWCH="true" scope="request"/>
	<c:if test="${not empty resolvedStaticAssetsRoot }">
		<c:set var="jspStoreImgDir" value="${resolvedStaticAssetsRoot}/${storeAssetsPath}/${sdb.jspStoreDir}/" scope="request" />
		<c:set var="jsAssetsDir" value="${resolvedStaticAssetsRoot}/${storeAssetsPath}/${sdb.jspStoreDir}/" scope="request" />
	</c:if>
	
	<wcst:resolveContentURL var="resolvedStaticAssetsRoot" url="http://[cmsHost]" storeStaticAssets="${!useWCHDebugMode}" includeHostName="true" scope="request"/>
	<c:if test="${not empty resolvedStaticAssetsRoot }">
		<c:set var="jsIBMWidgetsAssetsPrefix" value="${resolvedStaticAssetsRoot}/${ibmAssetsPath}${env_siteWidgetsDir}" scope="request" />
		<c:set var="jspIBMWidgetsImgPrefix" value="${resolvedStaticAssetsRoot}/${ibmAssetsPath}/" scope="request" />
	</c:if>
</flow:ifEnabled>


<%-- Load the store bundles --%>
<wcst:alias name="StoreServer" var="isStoreServer" />
<c:if test="${env_inPreview }">
	<c:if test="${not empty cookie.WC_TOOLLOCALE.value }">
		<fmt:setLocale value="${cookie.WC_TOOLLOCALE.value}"/>
	</c:if>
	<c:if test="${empty cookie.WC_TOOLLOCALE.value }">
	<%--
		The TOOLLOCALE will be empty if the preview launched from Accelerator
	--%>
		<fmt:setLocale value="${CommandContext.locale}" />
	</c:if>
	<c:choose>
		<c:when test="${isStoreServer == 'true'}">
			<wcst:setBundle basename="com.ibm.commerce.stores.preview.properties.StorePreviewer" var="ibmPreviewText" location="widget"/>
			<wcst:setBundle basename="com.ibm.commerce.stores.preview.properties.StorePreviewer" var="storePreviewText" location="store"/>
		</c:when>
		<c:otherwise>
			<wcst:setBundle basename="com.ibm.commerce.stores.preview.properties.StorePreviewer" var="ibmPreviewText"/>
		</c:otherwise>
	</c:choose>
</c:if>

<fmt:setLocale value="${CommandContext.locale}" />
<fmt:setBundle basename="/${sdb.jspStoreDir}/storetext_v2" var="storeText" scope="request"/>

<wcf:useBean var="previewText" classname="java.util.ArrayList"/>
<c:if test="${!empty storePreviewText}">
	<wcf:set target="${previewText}" value="${storePreviewText}"/>
</c:if>
<wcf:set target="${previewText}" value="${ibmPreviewText}"/>

<%-- Default view in which products are displayed--%>
<c:set var="env_defaultPageView" value="grid" scope="request"/>

<%-- Is contract selection enabled? --%>
<flow:ifEnabled feature="contractSelection">
	<c:set var="env_contractSelection" value="true" scope="request"/>
</flow:ifEnabled>
<flow:ifDisabled feature="contractSelection">
	<c:set var="env_contractSelection" value="false" scope="request"/>
</flow:ifDisabled>
<c:set var="env_displayListPriceInProductPage" value="true" scope="request"/>

<%-- Set to context root where images can be found --%>
<c:set var="env_imageContextPath" value="${staticAssetContextRoot}" />

<c:choose>
	<c:when test="${CommandContext.locale eq 'iw_IL'}">
		<c:set var="isBiDiLocale" value="true" scope="request"/>
		<c:set var="shortLocale" value="he"/>
	</c:when>
	<c:when test="${CommandContext.locale eq 'ar_EG'}">
		<c:set var="isBiDiLocale" value="true" scope="request"/>
		<c:set var="shortLocale" value="${fn:substring(CommandContext.locale,0,2)}"/>
	</c:when>
	<c:otherwise>
		<c:set var="shortLocale" value="${fn:substring(CommandContext.locale,0,2)}"/>
		<c:set var="isBiDiLocale" value="false" scope="request"/>
	</c:otherwise>
</c:choose>

<c:set var="key1" value="store/${storeId}/currency_format+byCurrency+${CommandContext.currency}+-1+${langId}"/>
<c:set var="currencyFormatterDB" value="${cachedOnlineStoreMap[key1]}"/>
<c:if test="${empty currencyFormatterDB}">
	<wcf:rest var="getCurrencyFormatResponse" url="store/{storeId}/currency_format" cached="true">
		<wcf:var name="storeId" value="${storeId}" />
		<wcf:param name="q" value="byCurrency" />
		<wcf:param name="currency" value="${CommandContext.currency}" />
		<wcf:param name="numberUsage" value="-1" />
		<wcf:param name="langId" value="${langId}" />
	</wcf:rest>
	<c:set var="currencyFormatterDB" value="${getCurrencyFormatResponse.resultList[0]}" scope="request" />
	<wcf:set target = "${cachedOnlineStoreMap}" key="${key1}" value="${currencyFormatterDB}"/>
</c:if>

<c:set var="env_currencyDecimal" value="${currencyFormatterDB.decimalPlaces}" scope="request"/>
<c:set var="env_currencyCode" value="${currencyFormatterDB.currencyCode}" scope="request"/>

<c:if test="${CommandContext.currency == 'KRW'}">
	<c:set property="currencySymbol" value='&#8361;' target="${currencyFormatterDB}"/>
</c:if>
<c:if test="${CommandContext.currency == 'PLN'}">
	<c:set property="currencySymbol" value='z&#322;' target="${currencyFormatterDB}"/>
</c:if>
<c:if test="${CommandContext.currency == 'TRY'}">
	<%-- No longer necessary when Turkish Lira is displayable through Unicode --%>
	<c:set property="currencySymbol" value="<IMG src='${env_imageContextPath}/images/turkish_lira.gif' align='bottom'>" target="${currencyFormatterDB}"/>
</c:if>
<c:if test="${CommandContext.currency == 'EGP' && locale != 'iw_IL'}">
	<c:set property="currencySymbol" value="<SPAN dir=ltr> .&#1580;.&#1605;</SPAN>" target="${currencyFormatterDB}"/>
</c:if>
<c:if test="${CommandContext.currency == 'ILS' && locale == 'iw_IL'}">
	<c:set property="currencySymbol" value="&#1513;&#1524;&#1495;" target="${currencyFormatterDB}"/>
</c:if>

<c:set var="env_CurrencySymbolToFormat" value="${currencyFormatterDB.currencySymbol}" scope="request"/>

<wcst:alias name="ConfigProperties" var="ConfigProperties" />
<wcst:mapper source="ConfigProperties" method="getValue" var="configValueMap" />
<wcst:mapper source="ConfigProperties" method="getWebModule" var="configWebModuleMap" />

<%--
    	// Add support for possible SSL Accelerator port setup in WC config file.
    	// There could be a setup for using different ports for SSL and nonSSL
    	// which are not 443 and 80 respectively.

    	// Uncomment the code below if using SSL Accelerator and want to read the values from the configuration file.
    	// Reading from config file can have a negative effect on performance. A better approach is to just enter the
    	// port values in this file directly by putting value in inSSLAcceleratorPort and inNonSSLAcceleratorPort
    	// variables below.
--%>
<c:if test="${empty loginTimeoutValue}">
	<c:set var="loginTimeoutValue" value="${configValueMap['LoginTimeout/Timeout/value']}"/>
</c:if>
<c:if test="${empty inSSLAcceleratorPort}">
	<c:set var="inSSLAcceleratorPort" value="443"/>
	<c:set var="inNonSSLAcceleratorPort" value="80"/>
</c:if>


<c:set var="request" value="${pageContext.request}"/>
<c:choose>
	<c:when test="${request.serverPort != 80 && request.serverPort != 443 && request.serverPort != requestScope.inSSLAcceleratorPort && request.serverPort != requestScope.inNonSSLAcceleratorPort}">
		<c:set var="portUsed" value=":${request.serverPort}"/>
	</c:when>
	<c:otherwise>
		<c:set var="portUsed" value=""/>
	</c:otherwise>
</c:choose>

<c:set var="schemeToUse" value="http"/>
<c:choose>
	<c:when test="${request.serverPort == requestScope.inSSLAcceleratorPort}">
		<c:set var="schemeToUse" value="https"/>
	</c:when>
	<c:when test="${request.serverPort == requestScope.inNonSSLAcceleratorPort}">
		<c:set var="schemeToUse" value="http"/>
	</c:when>
	<c:otherwise>
		<c:set var="schemeToUse" value="${request.scheme}"/>
	</c:otherwise>
</c:choose>

<c:set var="env_schemeToUse" value="${schemeToUse}" scope="request"/>
<c:set var="env_contextPathUsed" value="" scope="request"/>
<c:set var="env_absoluteUrl" value="" scope="request"/>

<c:if test="${empty SEOContextPath}">
	<wcst:alias name="SEOConfigReg" var="seoConfig"/>
	<c:set var="SEOContextPath" value="${seoConfig.rewriteRuleForStore}" scope="request"/>
</c:if>

<c:choose>
	<c:when test="${env_inPreview}">
		<c:if test="${!empty requestScope['requestURIPath'] && requestScope['requestURIPath'] != null && !empty requestScope['requestServletPath'] && requestScope['requestServletPath'] != null}">
			<c:set var="env_contextPathUsed" value="${fn:substringBefore(requestScope['requestURIPath'],requestScope['requestServletPath'])}" scope="request"/>
			<c:set var="env_contextAndServletPath" value="${env_contextPathUsed}${requestScope['requestServletPath']}" scope="request"/>
			<c:set var="env_absoluteUrl" value="${schemeToUse}://${request.serverName}${portUsed}${env_contextPathUsed}${requestScope['requestServletPath']}/" scope="request"/>
		</c:if>
	</c:when>
	<c:otherwise>
		<c:set var="env_contextAndServletPath" value="${SEOContextPath}" scope="request"/>
		<c:set var="env_absoluteUrl" value="${schemeToUse}://${request.serverName}${portUsed}${SEOContextPath}/" scope="request"/>
	</c:otherwise>
</c:choose>

<c:set var="sslPortForStores" value="${moduleConfig['Stores'].SSLPort}"/>
<c:set var="nonSSLPortForStores" value="${moduleConfig['Stores'].nonSSLPort}"/>

<%-- Build URL Prefixes - http[s]://hostname[:portNumber] --%>
<c:if test="${!empty nonSSLPortForStores && nonSSLPortForStores != '80'}">
	<c:set var="httpPort" value = ":${nonSSLPortForStores}"/>
</c:if>
<c:set var="urlPrefixForHTTP" value="http://${pageContext.request.serverName}" scope="request"/>

<c:if test="${!empty sslPortForStores && sslPortForStores != '443'}">
	<c:set var="httpsPort" value = ":${sslPortForStores}"/>
</c:if>
<c:set var="urlPrefixForHTTPS" value="https://${pageContext.request.serverName}${httpsPort}" scope="request"/>

<%-- Since this env file is included at lot of places, make sure that we construct HomePageURLWithLang SEO URL only once --%>
<c:if test = "${empty env_TopCategoriesDisplayURL}">
	<wcf:url var="TopCategoriesDisplayURLTemp" value="TopCategories1" patternName="HomePageURLWithLang">
		<wcf:param name="langId" value="${langId}" />
		<wcf:param name="storeId" value="${storeId}" />
		<wcf:param name="catalogId" value="${catalogId}" />
		<wcf:param name="urlLangId" value="${urlLangId}"/>
	</wcf:url>
	<%-- Put the variable in request scope, so that imported JSP's will find this var --%>
	<c:set var="env_TopCategoriesDisplayURL" value="${TopCategoriesDisplayURLTemp}" scope="request"/>
</c:if>

<%-- This variable is used to determine if the should support payment type promotions on the shipping & billing method page. --%>
<flow:ifEnabled feature="PaymentPromotion">
	<c:set var="supportPaymentTypePromotions" value="true"/>
</flow:ifEnabled>
<flow:ifDisabled feature="PaymentPromotion">
	<c:set var="supportPaymentTypePromotions" value="false"/>
</flow:ifDisabled>

<%-- Constants used by subscriptions products --%>
<c:set var="env_subsFulfillmentFrequencyAttrName" value="fulfillmentFrequency" scope="request"/>
<c:set var="env_subsPaymentFrequencyAttrName" value="paymentFrequency" scope="request"/>
<c:set var="env_subsTimePeriodAttrName" value="timePeriod" scope="request"/>

<c:set var="env_maxOrderItemsToInspect" value="50"/>

<%-- Begin pagination control variables definition --%>
<%-- set default pageSize and beginIndex --%>
<c:set var="beginIndex" scope="request"><c:out value="${WCParam.beginIndex}" /> </c:set>
<c:if test="${empty beginIndex}">
	<c:set var="beginIndex" value = "0" scope="request"/>
</c:if>

<c:set var="pageSize" scope="request"><c:out value="${WCParam.pageSize}" /></c:set>
<c:if test="${empty pageSize}">
	<c:set var="pageSize" scope="request"><c:out value="${param.resultsPerPage}" /></c:set>
	<c:if test="${empty pageSize}">
		<c:set var="pageSize" value="12" scope="request"/>
	</c:if>
</c:if>
<c:set var="env_resultsPerRow" value="4" scope="request"/>
<c:set var="env_grid_pagination_count" value = "${12}" scope="request"/>
<c:set var="env_list_pagination_count" value = "${8}" scope="request"/>
<%-- End pagination control variables definition --%>

<wcst:alias name="StoreModuleName" var="storeModuleName" />
<c:if test="${empty  env_webAlias}">
	<c:set var="env_webAlias" value="${configWebModuleMap[storeModuleName].webAlias}"/>
</c:if>
<c:set var="storeContextPath" value="${configWebModuleMap[storeModuleName].contextPath}${configWebModuleMap[storeModuleName].urlMappingPath}" scope="request"/>
<c:if test="${configWebModuleMap[storeModuleName].contextPath eq '/' }" >
	<c:set var="storeContextPath" value="${configWebModuleMap[storeModuleName].urlMappingPath}" scope="request"/>
</c:if>
<c:set var="profileShippingNickname" value="Default_Shipping_${storeId}"/>
<c:set var="profileBillingNickname" value="Default_Billing_${storeId}"/>

<c:set var="maxOrderItemsPerPage" value="20"/>
<c:set var="maxOrderItemsToInspect" value="50"/>
<c:set var="validOrderStatusForCancel" value="A,B,C,E,I,L,M,N,P,W"/>
<c:set var="validOrderStatusForModify" value="A,B,C,E,I,L,M,N,P,W"/>



<%-- Oracle has a limitation on the number of identifiers on an "in" clause --%>
<c:set var="maxSKUs" value="1000"/>

<%-- These variables are used to determine if the corresponding orders will be categorized and displayed in the order status section. --%>
<c:set var="showProcessedOrders" value="true"/>
<c:set var="showWaitingForApprovalOrders" value="false"/>
<flow:ifEnabled feature="contractSelection">
	<c:set var="showWaitingForApprovalOrders" value="true"/>
</flow:ifEnabled>
<c:set var="showScheduledOrders" value="false"/>

<%-- The variable showPONumber is used to indicate if the purchase order number should be displayed for this store. --%>
<c:set var="showPONumber" value="false"/>
<flow:ifEnabled feature="contractSelection">
	<c:set var="showPONumber" value="true"/>
</flow:ifEnabled>

<%-- The variable ariaMessageNode is used to indicate id of the span where refreshArea will update message when the content is updated.  This message will notify the user of certain section on the page is updated after the refreshArea is completed using aria live region.  The default span is located in MessageDisplay.jspf --%>
<c:set var="ariaMessageNode" value="ariaMessage" scope="request"/>
<c:if test="${env_inPreview && empty previewContext}">
	<c:set var="previewContext" value="${CmdContextGetContxt['com.ibm.commerce.context.preview.PreviewContext']}" />
</c:if>
<c:if test="${!empty previewContext}">
	<c:set var="previewToken" value="${previewContext.properties['previewToken']}"/>
</c:if>
<c:if test="${empty previewToken}">
	<c:set var="previewToken" value="${CmdContextGetContxt['previewToken']}"/>
</c:if>

<c:set var="env_storePreviewLink" value="${!empty previewContext && !empty previewContext.properties['previewToken']}"/>

<%-- The amount of time that the inactivity dialog will stay before it closes itself, default is 20 sec  --%>
<c:set var="inactivityWarningDialogDisplayTimer" value="20000" scope="request"/>

<%-- The amount of time that the inactivity dialog will display before the server time out, the default server timeout is 30 minutes and the dialog wlil open 30 seconds before that --%>
<c:set var="inactivityWarningDialogBuffer" value="30000" scope="request"/>

<%@ include file="../ShoppingArea/Configurator/SterlingConfiguratorIntegrationSetup.jspf" %>
<c:set var="android" value="${fn:contains(fn:toLowerCase(header['User-Agent']),'android')}" scope="request"/>
<c:set var="ios" value="${fn:contains(fn:toLowerCase(header['User-Agent']),'ipad') || fn:contains(fn:toLowerCase(header['User-Agent']),'iphone') || fn:contains(fn:toLowerCase(header['User-Agent']),'ipod')}" scope="request"/>
<c:if test="${ios == 'true'}">
	<c:set var="systemClass" value="class='ios'"/>
</c:if>
<c:set var="env_Tealeaf" value="false"/>
<flow:ifEnabled feature="Tealeaf">
	<c:set var="env_Tealeaf" value="true"/>
</flow:ifEnabled>

<%-- These variables are used to store the frequency values for a recurring order.--%>
<c:set var="RecurringOrderFrequency1" value="1"/>
<c:set var="RecurringOrderFrequency2" value="1"/>
<c:set var="RecurringOrderFrequency3" value="1"/>
<c:set var="RecurringOrderFrequency4" value="2"/>
<c:set var="RecurringOrderFrequency5" value="3"/>
<c:set var="RecurringOrderFrequency6" value="4"/>

<%-- These variables are used to store the UOM of recurring order frequencies. The possible values are: DAY, HUR, MON, WEE, ANN--%>
<c:set var="RecurringOrderFrequencyUOM1" value="DAY"/>
<c:set var="RecurringOrderFrequencyUOM2" value="DAY"/>
<c:set var="RecurringOrderFrequencyUOM3" value="WEE"/>
<c:set var="RecurringOrderFrequencyUOM4" value="WEE"/>
<c:set var="RecurringOrderFrequencyUOM5" value="WEE"/>
<c:set var="RecurringOrderFrequencyUOM6" value="WEE"/>
<c:set var="RecurringOrderFrequencyDayUOM" value="DAY"/>
<c:set var="RecurringOrderFrequencyWeekUOM" value="WEE"/>
<c:set var="RecurringOrderFrequencyMonthUOM" value="MON"/>

<%-- These variables are used to store the frequency display texts for recurring orders. --%>
<fmt:message bundle="${storeText}" var="RecurringOrderFrequencyText1" key="SCHEDULE_ORDER_INTERVAL_1" />
<fmt:message bundle="${storeText}" var="RecurringOrderFrequencyText2" key="EVERY_DAY" />
<fmt:message bundle="${storeText}" var="RecurringOrderFrequencyText3" key="EVERY_WEEK" />
<fmt:message bundle="${storeText}" var="RecurringOrderFrequencyText4" key="EVERY_X_WEEKS" >
	<fmt:param value="${RecurringOrderFrequency4}"></fmt:param>
</fmt:message>
<fmt:message bundle="${storeText}" var="RecurringOrderFrequencyText5" key="EVERY_X_WEEKS" >
	<fmt:param value="${RecurringOrderFrequency5}"></fmt:param>
</fmt:message>
<fmt:message bundle="${storeText}" var="RecurringOrderFrequencyText6" key="EVERY_X_WEEKS" >
	<fmt:param value="${RecurringOrderFrequency6}"></fmt:param>
</fmt:message>

<%-- This variable is used to store the notice period for cancelling a recurring order in seconds. --%>
<c:set var="cancelRecurringOrderNoticePeriod" value="43200"/>

<%-- This variable is used to store the notice period for cancelling a subscription in seconds. --%>
<c:set var="cancelSubscriptionNoticePeriod" value="43200"/>

<%-- Mobile30 setup START --%>
<c:set var="pageMax1" value="5"/>
<c:set var="pageMax2" value="10"/>
<c:set var="storeNameDir" value="mobile30/" scope="page" />
<c:set var="mobileBasePath" value="${storeNameDir}" scope="page" />

<%-- Set variables for device specific rendering --%>
<c:if test="${EC_deviceAdapter.deviceFormatId == -44 || EC_deviceAdapter.deviceFormatId == -42}">
	<c:set var="_worklightHybridApp" value="true" scope="request"/>
	<c:set var="mobileBasePath" value="WorklightHybrid/"/>
	<c:set var="pageMax1" value="20"/>
	<c:set var="pageMax2" value="20"/>
</c:if>

<flow:fileRef id="vfileStylesheet_m30" fileId="vfile.stylesheet"/>
<c:set var = "env_vfileStylesheet_m30" scope="request" value="${jspStoreImgDir}${storeNameDir}${vfileStylesheet_m30}" />

<%-- Set mobile viewport --%>
<c:set var="viewport" value="width=device-width, initial-scale=1"/>

<c:set var="shopcartMaxPageSize" value="${pageMax1}" />
<c:set var="addressBookMaxPageSize" value="${pageMax1}"/>
<c:set var="departmentMaxPageSize" value="${pageMax2}" />
<c:set var="categoryMaxPageSize" value="${pageMax2}" />
<c:set var="productsMaxPageSize" value="${pageMax2}" />
<c:set var="searchResultsMaxPageSize" value="${pageMax2}" />
<c:set var="storeLocatorResultMaxPageSize" value="${pageMax2}" />
<c:set var="wishlistMaxPageSize" value="${pageMax2}" />
<c:set var="orderHistoryMaxPageSize" value="${pageMax2}" />
<c:set var="orderSummaryMaxPageSize" value="${pageMax2}" />
<c:set var="registeredCustomersResultListSize" value="${pageMax2}" scope="request"/>

<c:set var="totalCheckoutSteps" value="5" />

<%-- The number of products/items that can be compared at a time --%>
<c:set var="numProdToCompare" value="0" />
<c:set var="maxProdToCompare" value="2" />

<%-- Number of physical stores allowed in the store list --%>
<c:set var="physicalStoreCookieMaxSize" value="5" />
<%-- Mobile30 setup END --%>

<c:set var="deviceClass" value="Web"/>
<c:if test="${ (EC_device.properties.deviceClass != null) && (!empty EC_device.properties.deviceClass) }">
	<c:set var="deviceClass" value="${EC_device.properties.deviceClass}"/>
</c:if>

<%-- Set this to false, if you want the entire department list to be loaded during pageLoad itself.
If set to true, department list will be loaded on-demand, when shopper clicks on the department button --%>
<c:set var="lazyLoadDepartmentsList" value="true"/>

<%-- Find out if multiple login session for same user is enabled --%>
<c:if test="${empty multiSessionEnabled}">
<wcst:mapper source="configInst" method="getValue" var="cfgInst" />
	<c:set var="enabled" value="${cfgInst['SessionManagement/AllowMultipleLogonForSameUser/enabled']}"/>
	<c:choose>
		<c:when test="${enabled}">
			<c:set var="multiSessionEnabled" value="true" />
		</c:when>
		<c:otherwise>
			<c:set var="multiSessionEnabled" value="false" />
		</c:otherwise>
	</c:choose>
</c:if>

<c:set var="defaultDisplayPriceRuleName" value="List price rule"/>
<c:set var="env_displayRibbonAdInGridMode" value="true" scope="request"/>
<c:set var="env_includeJSPFExtension" value="false" scope="request"/>
<c:if test="${!empty CommandContext.currentTradingAgreementIdsAsString}">
    <c:set var="env_activeContractIds" value="${fn:split(CommandContext.currentTradingAgreementIdsAsString, ';')}" scope="request"/>
</c:if>
<%-- variables for buy on behalf  --%>
<c:set var="env_shopOnBehalfEnabled_CSR" value="false"/>
<c:set var="env_shopOnBehalfEnabled" value="false"/>
<c:set var="env_shopOnBehalfSessionEstablished" value="false"/>

<c:if test="${CommandContext.callerId != CommandContext.forUserId && !empty CommandContext.stickyUserId}">
	 <c:set var="env_shopOnBehalfSessionEstablished" value="true"/> <%-- OnBehalf Session is established at this point of time --%>
	 <%-- Check if it is b2b Administrator or CSR who has initiated the session --%>
	 <c:set var="wcOnbehalfRoleCookieName" value="WC_OnBehalf_Role_${storeId}"/>
	 <c:set var="wcOnbehalfRoleCookieVal" value="${cookie[wcOnbehalfRoleCookieName].value}" />
	 <c:choose>
		<c:when test="${!empty wcOnbehalfRoleCookieVal && wcOnbehalfRoleCookieVal eq 'CSR'}">
			 <c:set var="env_shopOnBehalfEnabled_CSR" value="true"/>
		</c:when>
		<c:otherwise>
			 <c:set var="env_shopOnBehalfEnabled" value="true"/>
		</c:otherwise>
	</c:choose>
	 <%-- With the run as user set, the user display name cannot be based on the command context's current user--%>
	 <c:set var="userLoginCookie" value="WC_LogonUserId_${WCParam.storeId}"/>
	 <c:if test="${!empty cookie[userLoginCookie].value}">
		 <c:set var="userDisplayName" value="${cookie[userLoginCookie].value}"/>
		 <%
			  String decoded = java.net.URLDecoder.decode((String)pageContext.getAttribute("userDisplayName"), "UTF-8");
			  if(decoded != null){
				pageContext.setAttribute("userDisplayName", decoded);
			  }
		%>
	 </c:if>
	 <c:set var="env_buyOnBehalfAdminUserId" value="${CommandContext.callerId}"/>
	 <c:set var="env_buyOnBehalfUserId" value="${CommandContext.forUserId}"/>
</c:if>

<c:if test="${!empty userType && userType ne 'G' && env_shopOnBehalfSessionEstablished eq false}">
	<%-- Check if shop on behalf for buyer adminstrators / CSR / CSS can be enabled --%>
	<%-- Get the roles for the user --%>
	<wcf:rest var="userRoles" url="store/{storeId}/person/{personId}" scope="request">
		<wcf:var name="storeId" value="${storeId}"/>
		<wcf:var name="personId" value="${userId}"/>
		<wcf:param name="responseFormat" value="json"/>
		<wcf:param name="profileName" value="IBM_Assigned_Roles_Details"/>
	</wcf:rest>
	<c:if test="${!empty userRoles && !empty userRoles.rolesWithDetails}">
		<c:forEach items="${userRoles.rolesWithDetails}" var="userRole">
			<c:choose>
				<c:when test="${userRole.roleId eq '-21' && env_b2bStore eq 'true'}">
					<c:set var="env_shopOnBehalfEnabled" value="true"/>
				</c:when>
				<c:when test="${userRole.roleId eq '-3' || userRole.roleId eq '-14'}">
					<c:set var="env_shopOnBehalfEnabled_CSR" value="true"/>
				</c:when>
			</c:choose>
		</c:forEach>
	</c:if>
</c:if>

<%-- if on-behalf-of-csr feature is disabled, then reset buy on behalf variables --%>
<flow:ifDisabled feature="on-behalf-of-csr">
	<c:if test = "${env_shopOnBehalfEnabled_CSR eq 'true'}">
		<%--
			 Even if onBehalfSession was established by some other means for CSR ( executing AjaxRunAsUserSetInSession command directly ),
			 reset env_shopOnBehalfSessionEstablished to false.
			 The reason to check for CSR user before resetting, is to make sure that we do not reset env_shopOnBehalfSessionEstablished set for B2BAdmin user.
		--%>
		<c:set var="env_shopOnBehalfSessionEstablished" value="false"/>
	</c:if>
	<%-- Reset to false. Feature is not enabled --%>
	<c:set var = "env_shopOnBehalfEnabled_CSR" value="false"/>
</flow:ifDisabled>

<c:set var="userLogonState" value="0"/>
<c:if test="${!empty userType && userType ne 'G' || env_shopOnBehalfSessionEstablished eq 'true'}">
	<%-- User type is not guest OR CSR has started guest user session --%>
	<c:set var="userLogonState" value="1"/>
</c:if>
<c:set var="anonymousUser" value="false" scope="request"/>
<c:if test="${CommandContext.user.userId eq '-1002'}">
	<c:set var="anonymousUser" value="true" scope="request"/>
</c:if>

<%-- IT configurable flag for disabling global login view  --%>
<c:set var="env_globalLoginViewDisabled" value="false"/>

<%-- enable/disable to display SKU URL instead of product URL when the product has only one single SKU --%>
<c:set var="env_displaySKUContextData" value="false" scope="request"/>

<wcst:alias name="UnRegisterMarketingEvent" var="unregisterMktEvent">
	<wcf:param name="parameter" value=""/>
	<wcf:param name="parameter" value="${storeId}"/>
</wcst:alias>

<c:set var="unregisterMktEvent" value="${unregisterMktEvent }" scope="request"/>
