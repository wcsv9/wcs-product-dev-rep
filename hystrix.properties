# Time in milliseconds after which the calling thread will timeout and walk away from the HystrixCommand.run()
# execution and mark the HystrixCommand as a TIMEOUT and perform fallback logic.
# default: 1000
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=300000

# wcs_get_health: 60000
hystrix.command.wcs_get_health.execution.isolation.thread.timeoutInMilliseconds=60000

# Whether HystrixCommand.getFallback() will be attempted when failure or rejection occurs.
# default: true
hystrix.command.default.fallback.enabled=false

hystrix.command.default.circuitBreaker.enabled=false
# Error percentage at which the circuit should trip open and start short-circuiting requests to fallback logic.
# default: 50 (must be greater than 0,
# 100 means no breaking despite of errors)
#hystrix.command.default.circuitBreaker.errorThresholdPercentage=50

# Minimum number of requests in rolling window needed before tripping the circuit will occur.
# default: 20
hystrix.command.default.circuitBreaker.requestVolumeThreshold=5

# After tripping the circuit how long to reject requests before allowing attempts again to determine if the
# circuit should be closed.
# default: 5000
#hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds=5000

# Time in milliseconds to wait between allowing health snapshots to be taken
# that calculate success and error percentages and affect circuit breaker status.
# default: 500
#hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds=500

# Whether HystrixCommand execution and events should be logged to HystrixRequestLog.
# default: true
#hystrix.command.default.requestLog.enabled=false
hystrix.threadpool.default.maxQueueSize=100
hystrix.threadpool.default.queueSizeRejectionThreshold=50
